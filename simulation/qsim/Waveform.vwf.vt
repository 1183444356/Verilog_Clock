// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2024 10:44:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_vlg_sample_tst(
	EN,
	clk,
	reset,
	sampler_tx
);
input  EN;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(EN or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_vlg_check_tst (
	decodeout0,
	decodeout1,
	decodeout2,
	decodeout3,
	decodeout4,
	decodeout5,
	sampler_rx
);
input [6:0] decodeout0;
input [6:0] decodeout1;
input [6:0] decodeout2;
input [6:0] decodeout3;
input [6:0] decodeout4;
input [6:0] decodeout5;
input sampler_rx;

reg [6:0] decodeout0_expected;
reg [6:0] decodeout1_expected;
reg [6:0] decodeout2_expected;
reg [6:0] decodeout3_expected;
reg [6:0] decodeout4_expected;
reg [6:0] decodeout5_expected;

reg [6:0] decodeout0_prev;
reg [6:0] decodeout1_prev;
reg [6:0] decodeout2_prev;
reg [6:0] decodeout3_prev;
reg [6:0] decodeout4_prev;
reg [6:0] decodeout5_prev;

reg [6:0] decodeout4_expected_prev;
reg [6:0] decodeout5_expected_prev;

reg [6:0] last_decodeout4_exp;
reg [6:0] last_decodeout5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	decodeout0_prev = decodeout0;
	decodeout1_prev = decodeout1;
	decodeout2_prev = decodeout2;
	decodeout3_prev = decodeout3;
	decodeout4_prev = decodeout4;
	decodeout5_prev = decodeout5;
end

// update expected /o prevs

always @(trigger)
begin
	decodeout4_expected_prev = decodeout4_expected;
	decodeout5_expected_prev = decodeout5_expected;
end


// expected decodeout5[ 6 ]
initial
begin
	decodeout5_expected[6] = 1'bX;
end 
// expected decodeout5[ 5 ]
initial
begin
	decodeout5_expected[5] = 1'bX;
end 
// expected decodeout5[ 4 ]
initial
begin
	decodeout5_expected[4] = 1'bX;
end 
// expected decodeout5[ 3 ]
initial
begin
	decodeout5_expected[3] = 1'bX;
end 
// expected decodeout5[ 2 ]
initial
begin
	decodeout5_expected[2] = 1'bX;
end 
// expected decodeout5[ 1 ]
initial
begin
	decodeout5_expected[1] = 1'bX;
end 
// expected decodeout5[ 0 ]
initial
begin
	decodeout5_expected[0] = 1'bX;
end 
// expected decodeout4[ 6 ]
initial
begin
	decodeout4_expected[6] = 1'bX;
end 
// expected decodeout4[ 5 ]
initial
begin
	decodeout4_expected[5] = 1'bX;
end 
// expected decodeout4[ 4 ]
initial
begin
	decodeout4_expected[4] = 1'bX;
end 
// expected decodeout4[ 3 ]
initial
begin
	decodeout4_expected[3] = 1'bX;
end 
// expected decodeout4[ 2 ]
initial
begin
	decodeout4_expected[2] = 1'bX;
end 
// expected decodeout4[ 1 ]
initial
begin
	decodeout4_expected[1] = 1'bX;
end 
// expected decodeout4[ 0 ]
initial
begin
	decodeout4_expected[0] = 1'bX;
end 
// generate trigger
always @(decodeout0_expected or decodeout0 or decodeout1_expected or decodeout1 or decodeout2_expected or decodeout2 or decodeout3_expected or decodeout3 or decodeout4_expected or decodeout4 or decodeout5_expected or decodeout5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected decodeout0 = %b | expected decodeout1 = %b | expected decodeout2 = %b | expected decodeout3 = %b | expected decodeout4 = %b | expected decodeout5 = %b | ",decodeout0_expected_prev,decodeout1_expected_prev,decodeout2_expected_prev,decodeout3_expected_prev,decodeout4_expected_prev,decodeout5_expected_prev);
	$display("| real decodeout0 = %b | real decodeout1 = %b | real decodeout2 = %b | real decodeout3 = %b | real decodeout4 = %b | real decodeout5 = %b | ",decodeout0_prev,decodeout1_prev,decodeout2_prev,decodeout3_prev,decodeout4_prev,decodeout5_prev);
`endif
	if (
		( decodeout4_expected_prev[0] !== 1'bx ) && ( decodeout4_prev[0] !== decodeout4_expected_prev[0] )
		&& ((decodeout4_expected_prev[0] !== last_decodeout4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[0] = decodeout4_expected_prev[0];
	end
	if (
		( decodeout4_expected_prev[1] !== 1'bx ) && ( decodeout4_prev[1] !== decodeout4_expected_prev[1] )
		&& ((decodeout4_expected_prev[1] !== last_decodeout4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[1] = decodeout4_expected_prev[1];
	end
	if (
		( decodeout4_expected_prev[2] !== 1'bx ) && ( decodeout4_prev[2] !== decodeout4_expected_prev[2] )
		&& ((decodeout4_expected_prev[2] !== last_decodeout4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[2] = decodeout4_expected_prev[2];
	end
	if (
		( decodeout4_expected_prev[3] !== 1'bx ) && ( decodeout4_prev[3] !== decodeout4_expected_prev[3] )
		&& ((decodeout4_expected_prev[3] !== last_decodeout4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[3] = decodeout4_expected_prev[3];
	end
	if (
		( decodeout4_expected_prev[4] !== 1'bx ) && ( decodeout4_prev[4] !== decodeout4_expected_prev[4] )
		&& ((decodeout4_expected_prev[4] !== last_decodeout4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[4] = decodeout4_expected_prev[4];
	end
	if (
		( decodeout4_expected_prev[5] !== 1'bx ) && ( decodeout4_prev[5] !== decodeout4_expected_prev[5] )
		&& ((decodeout4_expected_prev[5] !== last_decodeout4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[5] = decodeout4_expected_prev[5];
	end
	if (
		( decodeout4_expected_prev[6] !== 1'bx ) && ( decodeout4_prev[6] !== decodeout4_expected_prev[6] )
		&& ((decodeout4_expected_prev[6] !== last_decodeout4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout4_expected_prev);
		$display ("     Real value = %b", decodeout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decodeout4_exp[6] = decodeout4_expected_prev[6];
	end
	if (
		( decodeout5_expected_prev[0] !== 1'bx ) && ( decodeout5_prev[0] !== decodeout5_expected_prev[0] )
		&& ((decodeout5_expected_prev[0] !== last_decodeout5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[0] = decodeout5_expected_prev[0];
	end
	if (
		( decodeout5_expected_prev[1] !== 1'bx ) && ( decodeout5_prev[1] !== decodeout5_expected_prev[1] )
		&& ((decodeout5_expected_prev[1] !== last_decodeout5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[1] = decodeout5_expected_prev[1];
	end
	if (
		( decodeout5_expected_prev[2] !== 1'bx ) && ( decodeout5_prev[2] !== decodeout5_expected_prev[2] )
		&& ((decodeout5_expected_prev[2] !== last_decodeout5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[2] = decodeout5_expected_prev[2];
	end
	if (
		( decodeout5_expected_prev[3] !== 1'bx ) && ( decodeout5_prev[3] !== decodeout5_expected_prev[3] )
		&& ((decodeout5_expected_prev[3] !== last_decodeout5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[3] = decodeout5_expected_prev[3];
	end
	if (
		( decodeout5_expected_prev[4] !== 1'bx ) && ( decodeout5_prev[4] !== decodeout5_expected_prev[4] )
		&& ((decodeout5_expected_prev[4] !== last_decodeout5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[4] = decodeout5_expected_prev[4];
	end
	if (
		( decodeout5_expected_prev[5] !== 1'bx ) && ( decodeout5_prev[5] !== decodeout5_expected_prev[5] )
		&& ((decodeout5_expected_prev[5] !== last_decodeout5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[5] = decodeout5_expected_prev[5];
	end
	if (
		( decodeout5_expected_prev[6] !== 1'bx ) && ( decodeout5_prev[6] !== decodeout5_expected_prev[6] )
		&& ((decodeout5_expected_prev[6] !== last_decodeout5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decodeout5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decodeout5_expected_prev);
		$display ("     Real value = %b", decodeout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_decodeout5_exp[6] = decodeout5_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN;
reg clk;
reg reset;
// wires                                               
wire [6:0] decodeout0;
wire [6:0] decodeout1;
wire [6:0] decodeout2;
wire [6:0] decodeout3;
wire [6:0] decodeout4;
wire [6:0] decodeout5;

wire sampler;                             

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.EN(EN),
	.clk(clk),
	.decodeout0(decodeout0),
	.decodeout1(decodeout1),
	.decodeout2(decodeout2),
	.decodeout3(decodeout3),
	.decodeout4(decodeout4),
	.decodeout5(decodeout5),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #640000 1'b0;
	EN = #960000 1'b1;
	EN = #2240000 1'b0;
	EN = #640000 1'b1;
end 

test_vlg_sample_tst tb_sample (
	.EN(EN),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

test_vlg_check_tst tb_out(
	.decodeout0(decodeout0),
	.decodeout1(decodeout1),
	.decodeout2(decodeout2),
	.decodeout3(decodeout3),
	.decodeout4(decodeout4),
	.decodeout5(decodeout5),
	.sampler_rx(sampler)
);
endmodule

